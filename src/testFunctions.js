const crypto = require('crypto');

class TestFunctions {
  constructor() {
    this.testResults = [];
    this.testCounter = 0;
  }

  // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  async testDatabase() {
    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
      const startTime = Date.now();
      await new Promise(resolve => setTimeout(resolve, 100)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
      const responseTime = Date.now() - startTime;
      
      return {
        success: true,
        test: 'database_connection',
        message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ',
        responseTime: `${responseTime}ms`,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        success: false,
        test: 'database_connection',
        message: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`,
        timestamp: new Date().toISOString()
      };
    }
  }

  // –¢–µ—Å—Ç GitHub API
  async testGitHubAPI(githubAPI) {
    try {
      const startTime = Date.now();
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ octocat
      const user = await githubAPI.getUser('octocat');
      const responseTime = Date.now() - startTime;
      
      return {
        success: true,
        test: 'github_api',
        message: 'GitHub API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        data: {
          username: user.login,
          name: user.name,
          public_repos: user.public_repos
        },
        responseTime: `${responseTime}ms`,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        success: false,
        test: 'github_api',
        message: `–û—à–∏–±–∫–∞ GitHub API: ${error.message}`,
        timestamp: new Date().toISOString()
      };
    }
  }

  // –¢–µ—Å—Ç Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async testRedis() {
    try {
      const startTime = Date.now();
      // –°–∏–º—É–ª—è—Ü–∏—è Redis –æ–ø–µ—Ä–∞—Ü–∏–π
      const testKey = `test_${Date.now()}`;
      const testValue = 'test_value';
      
      // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∏ —á—Ç–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 50));
      const responseTime = Date.now() - startTime;
      
      return {
        success: true,
        test: 'redis_connection',
        message: 'Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ',
        data: {
          testKey,
          testValue,
          operation: 'set/get'
        },
        responseTime: `${responseTime}ms`,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        success: false,
        test: 'redis_connection',
        message: `–û—à–∏–±–∫–∞ Redis: ${error.message}`,
        timestamp: new Date().toISOString()
      };
    }
  }

  // –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  testLogging(logger) {
    try {
      const testMessage = '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è';
      
      logger.info(testMessage, { test: true, timestamp: Date.now() });
      logger.warn('–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', { test: true });
      logger.error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)', { test: true });
      
      return {
        success: true,
        test: 'logging_system',
        message: '–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç',
        data: {
          levels: ['info', 'warn', 'error'],
          testMessage
        },
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        success: false,
        test: 'logging_system',
        message: `–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`,
        timestamp: new Date().toISOString()
      };
    }
  }

  // –¢–µ—Å—Ç webhook –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  testWebhookValidation() {
    try {
      const testPayload = JSON.stringify({ test: 'webhook_validation' });
      const testSecret = 'test_secret_key';
      const testSignature = 'sha256=' + crypto.createHmac('sha256', testSecret).update(testPayload).digest('hex');
      
      // –°–∏–º—É–ª—è—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const isValid = testSignature.startsWith('sha256=');
      
      return {
        success: true,
        test: 'webhook_validation',
        message: 'Webhook –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç',
        data: {
          payloadLength: testPayload.length,
          signatureValid: isValid,
          algorithm: 'sha256'
        },
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        success: false,
        test: 'webhook_validation',
        message: `–û—à–∏–±–∫–∞ webhook –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`,
        timestamp: new Date().toISOString()
      };
    }
  }

  // –¢–µ—Å—Ç –∞–¥–º–∏–Ω —Å–∏—Å—Ç–µ–º—ã
  testAdminSystem(adminManager) {
    try {
      const stats = adminManager.getSystemStats();
      const users = adminManager.getAllUsers();
      const admins = adminManager.getAllAdmins();
      
      return {
        success: true,
        test: 'admin_system',
        message: '–ê–¥–º–∏–Ω —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç',
        data: {
          uptime: stats.uptime,
          totalUsers: users.length,
          totalAdmins: admins.length,
          activeSessions: stats.active_sessions
        },
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        success: false,
        test: 'admin_system',
        message: `–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω —Å–∏—Å—Ç–µ–º—ã: ${error.message}`,
        timestamp: new Date().toISOString()
      };
    }
  }

  // –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async testPerformance() {
    try {
      const startTime = Date.now();
      const iterations = 1000;
      
      // –¢–µ—Å—Ç CPU
      let result = 0;
      for (let i = 0; i < iterations; i++) {
        result += Math.sqrt(i) * Math.sin(i);
      }
      
      const cpuTime = Date.now() - startTime;
      
      // –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
      const memoryUsage = process.memoryUsage();
      
      return {
        success: true,
        test: 'performance',
        message: '–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω',
        data: {
          cpuTime: `${cpuTime}ms`,
          iterations,
          memoryUsage: {
            rss: `${Math.round(memoryUsage.rss / 1024 / 1024)}MB`,
            heapUsed: `${Math.round(memoryUsage.heapUsed / 1024 / 1024)}MB`,
            heapTotal: `${Math.round(memoryUsage.heapTotal / 1024 / 1024)}MB`
          }
        },
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      return {
        success: false,
        test: 'performance',
        message: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`,
        timestamp: new Date().toISOString()
      };
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests(githubAPI, logger, adminManager) {
    this.testCounter++;
    const testRunId = `test_run_${this.testCounter}_${Date.now()}`;
    const startTime = Date.now();
    
    console.log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ #${this.testCounter}...`);
    
    const tests = [
      () => this.testDatabase(),
      () => this.testGitHubAPI(githubAPI),
      () => this.testRedis(),
      () => this.testLogging(logger),
      () => this.testWebhookValidation(),
      () => this.testAdminSystem(adminManager),
      () => this.testPerformance()
    ];
    
    const results = [];
    
    for (const test of tests) {
      try {
        const result = await test();
        results.push(result);
        console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${result.test}: ${result.message}`);
      } catch (error) {
        results.push({
          success: false,
          test: 'unknown',
          message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`,
          timestamp: new Date().toISOString()
        });
        console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      }
    }
    
    const totalTime = Date.now() - startTime;
    const successCount = results.filter(r => r.success).length;
    const totalCount = results.length;
    
    const summary = {
      testRunId,
      totalTime: `${totalTime}ms`,
      successCount,
      totalCount,
      successRate: `${Math.round((successCount / totalCount) * 100)}%`,
      timestamp: new Date().toISOString(),
      results
    };
    
    this.testResults.push(summary);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalCount} (${Math.round((successCount / totalCount) * 100)}%)`);
    console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}ms`);
    console.log(`   ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞: ${testRunId}\n`);
    
    return summary;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
  getTestHistory() {
    return {
      totalRuns: this.testResults.length,
      lastRun: this.testResults[this.testResults.length - 1] || null,
      allResults: this.testResults
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤
  clearTestHistory() {
    this.testResults = [];
    this.testCounter = 0;
    return { message: '–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞' };
  }
}

module.exports = TestFunctions;
