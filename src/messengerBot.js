const DatabaseManager = require('./database');

class MessengerBot {
  constructor(logger) {
    this.logger = logger;
    this.users = new Map();
    this.flightRequests = new Map();
    this.database = new DatabaseManager();
    this.setupCommands();
    this.initDatabase();
  }

  async initDatabase() {
    try {
      await this.database.init();
      console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  setupCommands() {
    this.commands = new Map();
    
    this.commands.set('start', {
      description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
      handler: this.handleStart.bind(this)
    });

    this.commands.set('help', {
      description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É',
      handler: this.handleHelp.bind(this)
    });

    this.commands.set('order_flight', {
      description: '–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–π—Å',
      handler: this.handleOrderFlight.bind(this)
    });

    this.commands.set('my_orders', {
      description: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã',
      handler: this.handleMyOrders.bind(this)
    });

    this.commands.set('cancel_order', {
      description: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
      handler: this.handleCancelOrder.bind(this)
    });

    this.commands.set('status', {
      description: '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
      handler: this.handleStatus.bind(this)
    });

    this.commands.set('select_location', {
      description: '–í—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏',
      handler: this.handleLocationSelection.bind(this)
    });

    this.commands.set('select_department', {
      description: '–í—ã–±–æ—Ä –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è',
      handler: this.handleDepartmentSelection.bind(this)
    });

    this.commands.set('select_date', {
      description: '–í—ã–±–æ—Ä –¥–∞—Ç—ã',
      handler: this.handleDateSelection.bind(this)
    });

    this.commands.set('select_position', {
      description: '–í—ã–±–æ—Ä –¥–æ–ª–∂–Ω–æ—Å—Ç–∏',
      handler: this.handlePositionSelection.bind(this)
    });

    this.commands.set('confirm_order', {
      description: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
      handler: this.handleConfirmOrder.bind(this)
    });

    this.commands.set('edit_order', {
      description: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
      handler: this.handleEditOrder.bind(this)
    });

    // –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å–ª—É–≥
    this.commands.set('order_weekend', {
      description: '–ó–∞–∫–∞–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö',
      handler: this.handleOrderWeekend.bind(this)
    });

    this.commands.set('order_hotel', {
      description: '–ó–∞–∫–∞–∑ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã',
      handler: this.handleOrderHotel.bind(this)
    });

    this.commands.set('order_aeroexpress', {
      description: '–ó–∞–∫–∞–∑ –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å–∞',
      handler: this.handleOrderAeroexpress.bind(this)
    });

    // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã–º–∏
    this.commands.set('weekend_book', {
      description: '–ó–∞–∫–∞–∑–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å',
      handler: this.handleWeekendBook.bind(this)
    });

    this.commands.set('weekend_cancel', {
      description: '–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å',
      handler: this.handleWeekendCancel.bind(this)
    });

    this.commands.set('weekend_free_dates', {
      description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã',
      handler: this.handleWeekendFreeDates.bind(this)
    });

    this.commands.set('weekend_booked_dates', {
      description: '–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã',
      handler: this.handleWeekendBookedDates.bind(this)
    });
  }

  async processMessage(userId, message) {
    try {
      const user = this.getOrCreateUser(userId);
      
      if (message.startsWith('/')) {
        const command = message.substring(1).split(' ')[0];
        const args = message.split(' ').slice(1);
        
        const commandInfo = this.commands.get(command);
        if (commandInfo && commandInfo.handler) {
          return await commandInfo.handler(userId, args);
        } else {
          return this.getUnknownCommandResponse();
        }
      } else {
        return this.handleTextMessage(userId, message);
      }
    } catch (error) {
      this.logger.error('Error processing message', { error: error.message, userId, message });
      return this.getErrorResponse();
    }
  }

  getOrCreateUser(userId) {
    if (!this.users.has(userId)) {
      this.users.set(userId, {
        id: userId,
        name: `User_${userId}`,
        createdAt: new Date(),
        lastActivity: new Date(),
        state: 'idle',
        currentOrder: null
      });
    }
    
    const user = this.users.get(userId);
    user.lastActivity = new Date();
    return user;
  }

  handleStart(userId, args) {
    const user = this.getOrCreateUser(userId);
    user.state = 'idle';
    
    const welcomeData = this.getWelcomeMessage();
    
    return {
      type: 'welcome',
      data: {
        message: welcomeData,
        serviceButtons: welcomeData.serviceButtons
      }
    };
  }

  getWelcomeMessage() {
    return {
      logo: 'CREW SERVICES',
      title: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥.',
      content: [
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:',
        '',
        '**–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:**',
        '‚Ä¢ ‚úàÔ∏è –ó–∞–∫–∞–∑ —Ä–µ–π—Å–∞ - –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–π—Å/—ç—Å—Ç–∞—Ñ–µ—Ç—É',
        '‚Ä¢ üèñÔ∏è –ó–∞–∫–∞–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö - –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏',
        '‚Ä¢ üè® –ó–∞–∫–∞–∑ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã - –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞',
        '‚Ä¢ üöÑ –ó–∞–∫–∞–∑ –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å–∞ - –±–∏–ª–µ—Ç—ã –Ω–∞ –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å',
        '',
        '–î–ª—è –∑–∞–∫–∞–∑–∞ —Ä–µ–π—Å–∞ –¥–µ–π—Å—Ç–≤—É—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:',
        '**–õ–∏–º–∏—Ç:** –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ –≤ –º–µ—Å—è—Ü –Ω–∞ —Ä–µ–π—Å/—ç—Å—Ç–∞—Ñ–µ—Ç—É.',
        '**–°—Ä–æ–∫–∏:** –° 20-–≥–æ –ø–æ 5-–µ —á–∏—Å–ª–æ (–≤–∫–ª.) –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü.',
        '**–£—Å–ª–æ–≤–∏—è –ß–ö–≠:** 100% –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞.'
      ],
      serviceButtons: [
        { id: 'order_flight', name: '‚úàÔ∏è –ó–∞–∫–∞–∑ —Ä–µ–π—Å–∞', description: '–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–π—Å/—ç—Å—Ç–∞—Ñ–µ—Ç—É' },
        { id: 'order_weekend', name: 'üèñÔ∏è –ó–∞–∫–∞–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö', description: '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏' },
        { id: 'order_hotel', name: 'üè® –ó–∞–∫–∞–∑ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã', description: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞' },
        { id: 'order_aeroexpress', name: 'üöÑ –ó–∞–∫–∞–∑ –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å–∞', description: '–ë–∏–ª–µ—Ç—ã –Ω–∞ –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å' }
      ]
    };
  }

  handleHelp(userId, args) {
    const helpText = [
      'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
      '',
      '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
      '/order_flight - –ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–π—Å',
      '/order_weekend - –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ',
      '/order_hotel - –ó–∞–∫–∞–∑–∞—Ç—å –≥–æ—Å—Ç–∏–Ω–∏—Ü—É',
      '/order_aeroexpress - –ó–∞–∫–∞–∑–∞—Ç—å –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å',
      '/my_orders - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–∫–∞–∑—ã',
      '/cancel_order - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑',
      '/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞',
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É',
      '',
      'üí° –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'
    ];

    return {
      type: 'help',
      data: {
        message: helpText.join('\n'),
        buttons: [
          { text: '‚úàÔ∏è –ó–∞–∫–∞–∑ —Ä–µ–π—Å–∞', command: '/order_flight' },
          { text: 'üèñÔ∏è –ó–∞–∫–∞–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö', command: '/order_weekend' },
          { text: 'üè® –ó–∞–∫–∞–∑ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã', command: '/order_hotel' },
          { text: 'üöÑ –ó–∞–∫–∞–∑ –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å–∞', command: '/order_aeroexpress' },
          { text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', command: '/my_orders' }
        ]
      }
    };
  }

  handleOrderFlight(userId, args) {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫–∞–∑–∞ —Ä–µ–π—Å–∞
    return this.handleLocationSelection(userId, ['moscow']); // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏
  }

  handleMyOrders(userId, args) {
    const user = this.getOrCreateUser(userId);
    const orders = Array.from(this.flightRequests.values())
      .filter(order => order.userId === userId)
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    if (orders.length === 0) {
      return {
        type: 'no_orders',
        data: {
          message: 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Ä–µ–π—Å–æ–≤.',
          buttons: [
            { text: '–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–π—Å', command: '/order_flight' },
            { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
          ]
        }
      };
    }

    const ordersList = orders.map((order, index) => 
      `${index + 1}. –†–µ–π—Å ${order.departure} ‚Üí ${order.destination}\n` +
      `   –î–∞—Ç–∞: ${order.date} ${order.time}\n` +
      `   –°—Ç–∞—Ç—É—Å: ${this.getStatusText(order.status)}\n` +
      `   ID: ${order.id}`
    ).join('\n\n');

    return {
      type: 'orders_list',
      data: {
        message: `üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã —Ä–µ–π—Å–æ–≤:\n\n${ordersList}`,
        buttons: [
          { text: '–ó–∞–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–π—Å', command: '/order_flight' },
          { text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', command: '/status' },
          { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
        ]
      }
    };
  }

  handleCancelOrder(userId, args) {
    const orderId = args[0];
    
    if (!orderId) {
      return {
        type: 'cancel_order_prompt',
        data: {
          message: '‚ùå –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞.\n\n–ü—Ä–∏–º–µ—Ä: /cancel_order 12345',
          buttons: [
            { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', command: '/my_orders' },
            { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
          ]
        }
      };
    }

    const order = this.flightRequests.get(orderId);
    if (!order || order.userId !== userId) {
      return {
        type: 'order_not_found',
        data: {
          message: '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.',
          buttons: [
            { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', command: '/my_orders' },
            { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
          ]
        }
      };
    }

    if (order.status === 'cancelled') {
      return {
        type: 'already_cancelled',
        data: {
          message: '‚ö†Ô∏è –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω.',
          buttons: [
            { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', command: '/my_orders' },
            { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
          ]
        }
      };
    }

    order.status = 'cancelled';
    order.cancelledAt = new Date();
    this.flightRequests.set(orderId, order);

    return {
      type: 'order_cancelled',
      data: {
        message: `‚úÖ –ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.`,
        buttons: [
          { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', command: '/my_orders' },
          { text: '–ó–∞–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–π—Å', command: '/order_flight' },
          { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
        ]
      }
    };
  }

  handleStatus(userId, args) {
    const orderId = args[0];
    
    if (!orderId) {
      const user = this.getOrCreateUser(userId);
      const orders = Array.from(this.flightRequests.values())
        .filter(order => order.userId === userId && order.status !== 'cancelled')
        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

      if (orders.length === 0) {
        return {
          type: 'no_orders',
          data: {
            message: 'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.',
            buttons: [
              { text: '–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–π—Å', command: '/order_flight' },
              { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
            ]
          }
        };
      }

      const statusList = orders.map(order => 
        `–ó–∞–∫–∞–∑ #${order.id}: ${this.getStatusText(order.status)}`
      ).join('\n');

      return {
        type: 'status_list',
        data: {
          message: `üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n${statusList}`,
          buttons: [
            { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', command: '/my_orders' },
            { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
          ]
        }
      };
    }

    const order = this.flightRequests.get(orderId);
    if (!order || order.userId !== userId) {
      return {
        type: 'order_not_found',
        data: {
          message: '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.',
          buttons: [
            { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', command: '/my_orders' },
            { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
          ]
        }
      };
    }

    return {
      type: 'order_status',
      data: {
        message: this.getOrderStatusMessage(order),
        buttons: [
          { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', command: '/my_orders' },
          { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
        ]
      }
    };
  }

  handleTextMessage(userId, message) {
    const user = this.getOrCreateUser(userId);
    
    if (user.state === 'ordering_flight') {
      return this.handleFlightOrderData(userId, message);
    }

    if (user.state === 'entering_name') {
      return this.handleNameInput(userId, message);
    }

    if (user.state === 'entering_employee_id') {
      return this.handleEmployeeIdInput(userId, message);
    }

    if (user.state === 'entering_direction') {
      return this.handleDirectionInput(userId, message);
    }

    if (user.state === 'entering_wishes') {
      return this.handleWishesInput(userId, message);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º –ª–æ–∫–∞—Ü–∏–∏
    const locationMap = {
      '–º–æ—Å–∫–≤–∞': 'moscow',
      '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'spb',
      '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 'krasnoyarsk',
      '—Å–æ—á–∏': 'sochi'
    };

    const locationId = locationMap[message.toLowerCase()];
    if (locationId) {
      return this.handleLocationSelection(userId, [locationId]);
    }

    return {
      type: 'unknown_message',
      data: {
        message: 'ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.',
        buttons: [
          { text: '–°–ø—Ä–∞–≤–∫–∞', command: '/help' },
          { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
        ]
      }
    };
  }

  handleLocationSelection(userId, args) {
    const locationId = args[0];
    const user = this.getOrCreateUser(userId);
    
    const locations = {
      'moscow': { name: '–ú–æ—Å–∫–≤–∞', icon: 'üèõÔ∏è', code: '–ú–°–ö' },
      'spb': { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', icon: 'üèõÔ∏è', code: '–°–ü–ë' },
      'krasnoyarsk': { name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', icon: 'üèîÔ∏è', code: '–ö–†–°' },
      'sochi': { name: '–°–æ—á–∏', icon: 'üå¥', code: '–°–û–ß' }
    };

    const location = locations[locationId];
    if (!location) {
      return {
        type: 'invalid_location',
        data: {
          message: '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.',
          buttons: [
            { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
          ]
        }
      };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ª–æ–∫–∞—Ü–∏—é
    user.selectedLocation = locationId;
    user.state = 'selecting_department';

    const currentTime = new Date().toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });

    return {
      type: 'department_selection',
      data: {
        message: `üëå –û—Ç–ª–∏—á–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è ${location.code}: ${currentTime}`,
        departmentButtons: [
          { id: 'oke1', name: '–û–ö–≠ 1' },
          { id: 'oke2', name: '–û–ö–≠ 2' },
          { id: 'oke3', name: '–û–ö–≠ 3' },
          { id: 'olsit', name: '–û–õ–°–ò–¢' }
        ],
        buttons: [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', command: '/start' }
        ]
      }
    };
  }

  handleDepartmentSelection(userId, args) {
    const departmentId = args[0];
    const user = this.getOrCreateUser(userId);
    
    const departments = {
      'oke1': { name: '–û–ö–≠ 1' },
      'oke2': { name: '–û–ö–≠ 2' },
      'oke3': { name: '–û–ö–≠ 3' },
      'olsit': { name: '–û–õ–°–ò–¢' }
    };

    const department = departments[departmentId];
    if (!department) {
      return {
        type: 'invalid_department',
        data: {
          message: '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.',
          buttons: [
            { text: '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ª–æ–∫–∞—Ü–∏–∏', command: '/start' }
          ]
        }
      };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
    user.selectedDepartment = departmentId;
    user.state = 'selecting_date';

    const locations = {
      'moscow': { name: '–ú–æ—Å–∫–≤–∞', icon: 'üèõÔ∏è' },
      'spb': { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', icon: 'üèõÔ∏è' },
      'krasnoyarsk': { name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', icon: 'üèîÔ∏è' },
      'sochi': { name: '–°–æ—á–∏', icon: 'üå¥' }
    };

    const location = locations[user.selectedLocation];

    return {
      type: 'date_selection',
      data: {
        message: `‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: ${department.name}\nüìç –õ–æ–∫–∞—Ü–∏—è: ${location.icon} ${location.name}\n\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–π—Å–∞:`,
        calendar: this.generateCalendar(new Date()),
        buttons: [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', command: '/start' }
        ]
      }
    };
  }

  handleDateSelection(userId, args) {
    const selectedDate = args[0];
    const user = this.getOrCreateUser(userId);
    
    if (!selectedDate) {
      return {
        type: 'invalid_date',
        data: {
          message: '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.',
          buttons: [
            { text: '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è', command: '/start' }
          ]
        }
      };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    user.selectedDate = selectedDate;
    user.state = 'selecting_position';

    const dateObj = new Date(selectedDate);
    const formattedDate = dateObj.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });

    const currentTime = new Date().toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });

    return {
      type: 'position_selection',
      data: {
        message: `‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ${formattedDate}\n\nüë®‚Äç‚úàÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:`,
        positionButtons: [
          { id: 'bp', name: '–ë–ü' },
          { id: 'bp_bs', name: '–ë–ü BS' },
          { id: 'sbe', name: '–°–ë–≠' },
          { id: 'ipb', name: '–ò–ü–ë' }
        ],
        buttons: [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã', command: '/select_department ' + user.selectedDepartment }
        ]
      }
    };
  }

  handlePositionSelection(userId, args) {
    const positionId = args[0];
    const user = this.getOrCreateUser(userId);
    
    const positions = {
      'bp': { name: '–ë–ü' },
      'bp_bs': { name: '–ë–ü BS' },
      'sbe': { name: '–°–ë–≠' },
      'ipb': { name: '–ò–ü–ë' }
    };

    const position = positions[positionId];
    if (!position) {
      return {
        type: 'invalid_position',
        data: {
          message: '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.',
          buttons: [
            { text: '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã', command: '/select_department ' + user.selectedDepartment }
          ]
        }
      };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å
    user.selectedPosition = positionId;
    user.state = 'entering_name';

    const dateObj = new Date(user.selectedDate);
    const formattedDate = dateObj.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });

    const locations = {
      'moscow': { name: '–ú–æ—Å–∫–≤–∞', icon: 'üèõÔ∏è' },
      'spb': { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', icon: 'üèõÔ∏è' },
      'krasnoyarsk': { name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', icon: 'üèîÔ∏è' },
      'sochi': { name: '–°–æ—á–∏', icon: 'üå¥' }
    };

    const departments = {
      'oke1': { name: '–û–ö–≠ 1' },
      'oke2': { name: '–û–ö–≠ 2' },
      'oke3': { name: '–û–ö–≠ 3' },
      'olsit': { name: '–û–õ–°–ò–¢' }
    };

    const location = locations[user.selectedLocation];
    const department = departments[user.selectedDepartment];

    return {
      type: 'name_input',
      data: {
        message: `‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å: ${position.name}\nüìÖ –î–∞—Ç–∞: ${formattedDate}\nüìç –õ–æ–∫–∞—Ü–∏—è: ${location.icon} ${location.name}\nüè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: ${department.name}\n\n‚úèÔ∏è –û—Ç–ª–∏—á–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –§–ò–û –∏ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç:`,
        formatBlock: {
          fields: [
            '–§–ò–û',
            '–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä'
          ],
          example: [
            '–°–æ–∫–æ–ª—è–Ω—Å–∫–∏–π –ê.–í.',
            '119356'
          ]
        },
        buttons: [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏', command: '/select_date ' + user.selectedDate }
        ]
      }
    };
  }

  handleNameInput(userId, message) {
    const user = this.getOrCreateUser(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –§–ò–û (–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã)
    if (message.trim().length < 3) {
      return {
        type: 'invalid_name',
        data: {
          message: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò.–ò.)',
          buttons: [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–æ–ª–∂–Ω–æ—Å—Ç–∏', command: '/select_date ' + user.selectedDate }
          ]
        }
      };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –§–ò–û
    user.fullName = message.trim();
    user.state = 'entering_employee_id';

    return {
      type: 'employee_id_input',
      data: {
        message: `‚úÖ –§–ò–û: ${user.fullName}\n\nüî¢ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:`,
        buttons: [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –§–ò–û', command: '/select_position ' + user.selectedPosition }
        ]
      }
    };
  }

  handleEmployeeIdInput(userId, message) {
    const user = this.getOrCreateUser(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
    if (!/^\d+$/.test(message.trim())) {
      return {
        type: 'invalid_employee_id',
        data: {
          message: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 119356)',
          buttons: [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –§–ò–û', command: '/select_position ' + user.selectedPosition }
          ]
        }
      };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä
    user.employeeId = message.trim();
    user.state = 'entering_direction';

    const dateObj = new Date(user.selectedDate);
    const formattedDate = dateObj.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });

    const locations = {
      'moscow': { name: '–ú–æ—Å–∫–≤–∞', icon: 'üèõÔ∏è' },
      'spb': { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', icon: 'üèõÔ∏è' },
      'krasnoyarsk': { name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', icon: 'üèîÔ∏è' },
      'sochi': { name: '–°–æ—á–∏', icon: 'üå¥' }
    };

    const departments = {
      'oke1': { name: '–û–ö–≠ 1' },
      'oke2': { name: '–û–ö–≠ 2' },
      'oke3': { name: '–û–ö–≠ 3' },
      'olsit': { name: '–û–õ–°–ò–¢' }
    };

    const positions = {
      'bp': { name: '–ë–ü' },
      'bp_bs': { name: '–ë–ü BS' },
      'sbe': { name: '–°–ë–≠' },
      'ipb': { name: '–ò–ü–ë' }
    };

    const location = locations[user.selectedLocation];
    const department = departments[user.selectedDepartment];
    const position = positions[user.selectedPosition];

    return {
      type: 'direction_input',
      data: {
        message: `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüë§ –§–ò–û: ${user.fullName}\nüî¢ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: ${user.employeeId}\nüë®‚Äç‚úàÔ∏è –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${position.name}\nüìÖ –î–∞—Ç–∞: ${formattedDate}\nüìç –õ–æ–∫–∞—Ü–∏—è: ${location.icon} ${location.name}\nüè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: ${department.name}\n\n‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:`,
        buttons: [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞', command: '/select_position ' + user.selectedPosition }
        ]
      }
    };
  }

  handleDirectionInput(userId, message) {
    const user = this.getOrCreateUser(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)
    if (message.trim().length < 2) {
      return {
        type: 'invalid_direction',
        data: {
          message: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞-–°–æ—á–∏)',
          buttons: [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É —Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞', command: '/select_position ' + user.selectedPosition }
          ]
        }
      };
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    user.direction = message.trim();
    user.state = 'entering_wishes';

    const dateObj = new Date(user.selectedDate);
    const formattedDate = dateObj.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });

    const locations = {
      'moscow': { name: '–ú–æ—Å–∫–≤–∞', icon: 'üèõÔ∏è' },
      'spb': { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', icon: 'üèõÔ∏è' },
      'krasnoyarsk': { name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', icon: 'üèîÔ∏è' },
      'sochi': { name: '–°–æ—á–∏', icon: 'üå¥' }
    };

    const departments = {
      'oke1': { name: '–û–ö–≠ 1' },
      'oke2': { name: '–û–ö–≠ 2' },
      'oke3': { name: '–û–ö–≠ 3' },
      'olsit': { name: '–û–õ–°–ò–¢' }
    };

    const positions = {
      'bp': { name: '–ë–ü' },
      'bp_bs': { name: '–ë–ü BS' },
      'sbe': { name: '–°–ë–≠' },
      'ipb': { name: '–ò–ü–ë' }
    };

    const location = locations[user.selectedLocation];
    const department = departments[user.selectedDepartment];
    const position = positions[user.selectedPosition];

    return {
      type: 'wishes_input',
      data: {
        message: `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüë§ –§–ò–û: ${user.fullName}\nüî¢ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: ${user.employeeId}\nüë®‚Äç‚úàÔ∏è –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${position.name}\nüìÖ –î–∞—Ç–∞: ${formattedDate}\nüìç –õ–æ–∫–∞—Ü–∏—è: ${location.icon} ${location.name}\nüè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: ${department.name}\n‚úàÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${user.direction}\n\nüìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –ï—Å–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–æ—á–µ—Ä–∫:`,
        buttons: [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–≤–æ–¥—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è', command: '/select_position ' + user.selectedPosition }
        ]
      }
    };
  }

  handleWishesInput(userId, message) {
    const user = this.getOrCreateUser(userId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è (–ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –≤–∫–ª—é—á–∞—è –ø—Ä–æ—á–µ—Ä–∫)
    user.wishes = message.trim();
    user.state = 'location_selected';

    const dateObj = new Date(user.selectedDate);
    const formattedDate = dateObj.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });

    const locations = {
      'moscow': { name: '–ú–æ—Å–∫–≤–∞', icon: 'üèõÔ∏è' },
      'spb': { name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', icon: 'üèõÔ∏è' },
      'krasnoyarsk': { name: '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', icon: 'üèîÔ∏è' },
      'sochi': { name: '–°–æ—á–∏', icon: 'üå¥' }
    };

    const departments = {
      'oke1': { name: '–û–ö–≠ 1' },
      'oke2': { name: '–û–ö–≠ 2' },
      'oke3': { name: '–û–ö–≠ 3' },
      'olsit': { name: '–û–õ–°–ò–¢' }
    };

    const positions = {
      'bp': { name: '–ë–ü' },
      'bp_bs': { name: '–ë–ü BS' },
      'sbe': { name: '–°–ë–≠' },
      'ipb': { name: '–ò–ü–ë' }
    };

    const location = locations[user.selectedLocation];
    const department = departments[user.selectedDepartment];
    const position = positions[user.selectedPosition];

    return {
      type: 'final_summary',
      data: {
        message: `‚ú® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à—É –∑–∞—è–≤–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:`,
        summary: {
          location: location.name,
          department: department.name,
          date: formattedDate,
          position: position.name,
          fullName: user.fullName,
          employeeId: user.employeeId,
          direction: user.direction,
          wishes: user.wishes
        },
        buttons: [
          { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', command: '/confirm_order', style: 'confirm' },
          { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', command: '/edit_order', style: 'edit' }
        ]
      }
    };
  }

  async handleConfirmOrder(userId, args) {
    const user = this.getOrCreateUser(userId);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      const orderId = this.generateOrderId();
      const order = {
        id: orderId,
        userId: userId,
        fullName: user.fullName,
        employeeId: user.employeeId,
        position: user.selectedPosition,
        location: user.selectedLocation,
        department: user.selectedDepartment,
        date: user.selectedDate,
        direction: user.direction,
        wishes: user.wishes,
        status: 'pending',
        createdAt: new Date()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await this.database.saveOrder(order);

      // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      if (!this.orders) {
        this.orders = new Map();
      }
      this.orders.set(orderId, order);

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user.state = 'idle';
      user.currentOrder = orderId;

      this.logger.info('–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', { orderId, userId });

      return {
        type: 'order_confirmed',
        data: {
          message: `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Ä–µ–π—Å–∞ ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—è –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞ –¶–ü –ø—Ä–∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ø–æ–ª–µ—Ç–æ–≤.\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏—Ç–µ /start.`,
          orderId: orderId,
          buttons: [
            { text: '/start', command: '/start' }
          ]
        }
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', { error: error.message, userId });
      
      return {
        type: 'error',
        data: {
          message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
          buttons: [
            { text: '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', command: '/confirm_order' },
            { text: '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', command: '/start' }
          ]
        }
      };
    }
  }

  handleEditOrder(userId, args) {
    const user = this.getOrCreateUser(userId);
    
    return {
      type: 'edit_options',
      data: {
        message: `‚úèÔ∏è –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?`,
        buttons: [
          { text: 'üìç –õ–æ–∫–∞—Ü–∏—é', command: '/edit_location' },
          { text: 'üè¢ –ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ', command: '/edit_department' },
          { text: 'üìÖ –î–∞—Ç—É', command: '/edit_date' },
          { text: 'üë®‚Äç‚úàÔ∏è –î–æ–ª–∂–Ω–æ—Å—Ç—å', command: '/edit_position' },
          { text: 'üë§ –§–ò–û', command: '/edit_name' },
          { text: 'üî¢ –¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä', command: '/edit_employee_id' },
          { text: '‚úàÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', command: '/edit_direction' },
          { text: 'üìù –ü–æ–∂–µ–ª–∞–Ω–∏—è', command: '/edit_wishes' },
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–≤–æ–¥–∫–µ', command: '/show_summary' }
        ]
      }
    };
  }

  generateOrderId() {
    return Math.random().toString(36).substr(2, 9).toUpperCase();
  }

  generateCalendar(date) {
    const year = date.getFullYear();
    const month = date.getMonth();
    const monthNames = [
      '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];

    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = (firstDay.getDay() + 6) % 7; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0

    const calendar = {
      month: monthNames[month],
      year: year,
      daysOfWeek: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
      days: []
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    for (let i = 0; i < startingDayOfWeek; i++) {
      calendar.days.push({ day: '', empty: true });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
      const dayDate = new Date(year, month, day);
      const isSpecial = day === 21; // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ —Å —Å–∞–º–æ–ª–µ—Ç–æ–º
      
      calendar.days.push({
        day: day,
        date: dayDate.toISOString().split('T')[0],
        special: isSpecial,
        available: true
      });
    }

    return calendar;
  }

  handleFlightOrderData(userId, message) {
    return {
      type: 'flight_order_instructions',
      data: {
        message: 'üìù –î–ª—è –∑–∞–∫–∞–∑–∞ —Ä–µ–π—Å–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /order_flight',
        buttons: [
          { text: '–ó–∞–∫–∞–∑–∞—Ç—å —Ä–µ–π—Å', command: '/order_flight' },
          { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
        ]
      }
    };
  }

  submitFlightOrder(userId, orderData) {
    const orderId = this.generateOrderId();
    const order = {
      id: orderId,
      userId: userId,
      ...orderData,
      status: 'pending',
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.flightRequests.set(orderId, order);
    
    const user = this.getOrCreateUser(userId);
    user.state = 'idle';
    user.currentOrder = orderId;

    return {
      type: 'order_submitted',
      data: {
        message: this.getOrderSubmittedMessage(order),
        buttons: [
          { text: '–ú–æ–∏ –∑–∞–∫–∞–∑—ã', command: '/my_orders' },
          { text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å', command: `/status ${orderId}` },
          { text: '–ó–∞–∫–∞–∑–∞—Ç—å –µ—â–µ', command: '/order_flight' },
          { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
        ]
      }
    };
  }

  getOrderSubmittedMessage(order) {
    return `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!

üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:
‚Ä¢ ID –∑–∞–∫–∞–∑–∞: #${order.id}
‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç: ${order.departure} ‚Üí ${order.destination}
‚Ä¢ –î–∞—Ç–∞: ${order.date} ${order.time}
‚Ä¢ –ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ${order.passengers}
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç: ${order.contact}
‚Ä¢ –°—Ç–∞—Ç—É—Å: ${this.getStatusText(order.status)}

‚è∞ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤
üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–π—Å–∞.`;
  }

  getOrderStatusMessage(order) {
    return `üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #${order.id}

–ú–∞—Ä—à—Ä—É—Ç: ${order.departure} ‚Üí ${order.destination}
–î–∞—Ç–∞: ${order.date} ${order.time}
–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤: ${order.passengers}
–°—Ç–∞—Ç—É—Å: ${this.getStatusText(order.status)}

–°–æ–∑–¥–∞–Ω: ${order.createdAt.toLocaleString('ru-RU')}
–û–±–Ω–æ–≤–ª–µ–Ω: ${order.updatedAt.toLocaleString('ru-RU')}`;
  }

  getStatusText(status) {
    const statusMap = {
      'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      'confirmed': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'in_progress': 'üöÄ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
      'completed': 'üéâ –ó–∞–≤–µ—Ä—à–µ–Ω',
      'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
      'rejected': 'üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω'
    };
    return statusMap[status] || '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }

  generateOrderId() {
    return Math.random().toString(36).substr(2, 8).toUpperCase();
  }

  getUnknownCommandResponse() {
    return {
      type: 'unknown_command',
      data: {
        message: '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.',
        buttons: [
          { text: '–°–ø—Ä–∞–≤–∫–∞', command: '/help' },
          { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
        ]
      }
    };
  }

  getErrorResponse() {
    return {
      type: 'error',
      data: {
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
        buttons: [
          { text: '–ù–∞ –≥–ª–∞–≤–Ω—É—é', command: '/start' }
        ]
      }
    };
  }

  getBotStats() {
    const totalUsers = this.users.size;
    const totalOrders = this.flightRequests.size;
    const activeOrders = Array.from(this.flightRequests.values())
      .filter(order => order.status === 'pending' || order.status === 'confirmed').length;

    return {
      totalUsers,
      totalOrders,
      activeOrders,
      users: Array.from(this.users.values()),
      orders: Array.from(this.flightRequests.values())
    };
  }

  updateOrderStatus(orderId, status) {
    const order = this.flightRequests.get(orderId);
    if (order) {
      order.status = status;
      order.updatedAt = new Date();
      this.flightRequests.set(orderId, order);
      return true;
    }
    return false;
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ–≤—ã—Ö —É—Å–ª—É–≥
  handleOrderWeekend(userId, args) {
    const user = this.getOrCreateUser(userId);
    user.state = 'weekend_menu';
    
    return {
      type: 'weekend_menu',
      data: {
        message: 'üèñÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        buttons: [
          { text: 'üìÖ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π', command: '/weekend_book' },
          { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π', command: '/weekend_cancel' },
          { text: 'üìã –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã', command: '/weekend_free_dates' },
          { text: 'üìù –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã', command: '/weekend_booked_dates' },
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', command: '/start' }
        ]
      }
    };
  }

  handleOrderHotel(userId, args) {
    const user = this.getOrCreateUser(userId);
    user.state = 'ordering_hotel';
    
    return {
      type: 'hotel_order_form',
      data: {
        message: 'üè® –ó–∞–∫–∞–∑ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã',
        form: {
          fields: [
            { name: 'check_in', label: '–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞', type: 'date', required: true },
            { name: 'check_out', label: '–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞', type: 'date', required: true },
            { name: 'guests', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π', type: 'number', required: true },
            { name: 'room_type', label: '–¢–∏–ø –Ω–æ–º–µ—Ä–∞', type: 'select', options: ['–°—Ç–∞–Ω–¥–∞—Ä—Ç', '–£–ª—É—á—à–µ–Ω–Ω—ã–π', '–õ—é–∫—Å'], required: true },
            { name: 'city', label: '–ì–æ—Ä–æ–¥', type: 'text', required: true },
            { name: 'contact', label: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', type: 'text', required: true },
            { name: 'notes', label: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è', type: 'textarea', required: false }
          ]
        },
        buttons: [
          { text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', action: 'submit_hotel_order' },
          { text: '–û—Ç–º–µ–Ω–∞', command: '/start' }
        ]
      }
    };
  }

  handleOrderAeroexpress(userId, args) {
    const user = this.getOrCreateUser(userId);
    user.state = 'ordering_aeroexpress';
    
    return {
      type: 'aeroexpress_order_form',
      data: {
        message: 'üöÑ –ó–∞–∫–∞–∑ –∞—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å–∞',
        form: {
          fields: [
            { name: 'departure_station', label: '–°—Ç–∞–Ω—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', type: 'select', options: ['–ê—ç—Ä–æ–ø–æ—Ä—Ç –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ', '–ê—ç—Ä–æ–ø–æ—Ä—Ç –î–æ–º–æ–¥–µ–¥–æ–≤–æ', '–ê—ç—Ä–æ–ø–æ—Ä—Ç –í–Ω—É–∫–æ–≤–æ'], required: true },
            { name: 'arrival_station', label: '–°—Ç–∞–Ω—Ü–∏—è –ø—Ä–∏–±—ã—Ç–∏—è', type: 'select', options: ['–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π –≤–æ–∫–∑–∞–ª', '–ü–∞–≤–µ–ª–µ—Ü–∫–∏–π –≤–æ–∫–∑–∞–ª', '–ö–∏–µ–≤—Å–∫–∏–π –≤–æ–∫–∑–∞–ª'], required: true },
            { name: 'departure_date', label: '–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏', type: 'date', required: true },
            { name: 'departure_time', label: '–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è', type: 'time', required: true },
            { name: 'passengers', label: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤', type: 'number', required: true },
            { name: 'contact', label: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', type: 'text', required: true },
            { name: 'notes', label: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è', type: 'textarea', required: false }
          ]
        },
        buttons: [
          { text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', action: 'submit_aeroexpress_order' },
          { text: '–û—Ç–º–µ–Ω–∞', command: '/start' }
        ]
      }
    };
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Ö–æ–¥–Ω—ã–º–∏ –¥–Ω—è–º–∏
  handleWeekendBook(userId, args) {
    const user = this.getOrCreateUser(userId);
    user.state = 'booking_weekend';
    
    return {
      type: 'weekend_booking_form',
      data: {
        message: 'üìÖ –ó–∞–∫–∞–∑ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è:',
        calendar: this.generateWeekendCalendar(new Date()),
        buttons: [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –≤—ã—Ö–æ–¥–Ω—ã—Ö', command: '/order_weekend' },
          { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', command: '/start' }
        ]
      }
    };
  }

  handleWeekendCancel(userId, args) {
    const user = this.getOrCreateUser(userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userWeekends = this.getUserWeekends(userId);
    
    if (userWeekends.length === 0) {
      return {
        type: 'no_weekends',
        data: {
          message: 'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π.',
          buttons: [
            { text: 'üìÖ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π', command: '/weekend_book' },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –≤—ã—Ö–æ–¥–Ω—ã—Ö', command: '/order_weekend' }
          ]
        }
      };
    }

    return {
      type: 'weekend_cancel_list',
      data: {
        message: '‚ùå –û—Ç–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è',
        description: '–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:',
        weekends: userWeekends,
        buttons: [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –≤—ã—Ö–æ–¥–Ω—ã—Ö', command: '/order_weekend' }
        ]
      }
    };
  }

  handleWeekendFreeDates(userId, args) {
    const freeDates = this.getFreeWeekendDates();
    
    return {
      type: 'weekend_free_dates',
      data: {
        message: 'üìã –°–≤–æ–±–æ–¥–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö',
        description: '–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö:',
        freeDates: freeDates,
        buttons: [
          { text: 'üìÖ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π', command: '/weekend_book' },
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –≤—ã—Ö–æ–¥–Ω—ã—Ö', command: '/order_weekend' }
        ]
      }
    };
  }

  handleWeekendBookedDates(userId, args) {
    const user = this.getOrCreateUser(userId);
    const userWeekends = this.getUserWeekends(userId);
    
    if (userWeekends.length === 0) {
      return {
        type: 'no_weekends',
        data: {
          message: 'üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π.',
          buttons: [
            { text: 'üìÖ –ó–∞–∫–∞–∑–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π', command: '/weekend_book' },
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –≤—ã—Ö–æ–¥–Ω—ã—Ö', command: '/order_weekend' }
          ]
        }
      };
    }

    return {
      type: 'weekend_booked_dates',
      data: {
        message: 'üìù –í–∞—à–∏ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏',
        description: '–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–Ω–µ–π:',
        weekends: userWeekends,
        buttons: [
          { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π', command: '/weekend_cancel' },
          { text: 'üìÖ –ó–∞–∫–∞–∑–∞—Ç—å –µ—â–µ', command: '/weekend_book' },
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –≤—ã—Ö–æ–¥–Ω—ã—Ö', command: '/order_weekend' }
        ]
      }
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤—ã—Ö–æ–¥–Ω—ã–º–∏
  generateWeekendCalendar(date) {
    const year = date.getFullYear();
    const month = date.getMonth();
    const monthNames = [
      '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
    ];

    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = (firstDay.getDay() + 6) % 7; // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0

    const calendar = {
      month: monthNames[month],
      year: year,
      daysOfWeek: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
      days: []
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    for (let i = 0; i < startingDayOfWeek; i++) {
      calendar.days.push({ day: '', empty: true });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    for (let day = 1; day <= daysInMonth; day++) {
      const dayDate = new Date(year, month, day);
      const isWeekend = dayDate.getDay() === 0 || dayDate.getDay() === 6; // –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
      const isPast = dayDate < new Date();
      
      calendar.days.push({
        day: day,
        date: dayDate.toISOString().split('T')[0],
        isWeekend: isWeekend,
        isPast: isPast,
        available: !isPast && isWeekend
      });
    }

    return calendar;
  }

  getUserWeekends(userId) {
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –ø–æ–∑–∂–µ –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return [];
  }

  getFreeWeekendDates() {
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∑–∂–µ –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const today = new Date();
    const freeDates = [];
    
    for (let i = 1; i <= 30; i++) {
      const date = new Date(today);
      date.setDate(today.getDate() + i);
      
      if (date.getDay() === 0 || date.getDay() === 6) { // –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        freeDates.push({
          date: date.toISOString().split('T')[0],
          formatted: date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
            weekday: 'long'
          })
        });
      }
    }
    
    return freeDates.slice(0, 10); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –¥–∞—Ç
  }
}

module.exports = MessengerBot;




