const axios = require('axios');

const BASE_URL = 'http://localhost:3000';

async function testAPI() {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ExpressBOT API...\n');

  try {
    // 1. –¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
    const mainResponse = await axios.get(`${BASE_URL}/`);
    console.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:', mainResponse.data.message);
    console.log('   –°—Ç–∞—Ç—É—Å:', mainResponse.data.status);
    console.log('   –í–µ—Ä—Å–∏—è:', mainResponse.data.version);
    console.log('');

    // 2. –¢–µ—Å—Ç health check
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º health check...');
    const healthResponse = await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ Health check:', healthResponse.data.status);
    console.log('   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:', Math.floor(healthResponse.data.uptime), '—Å–µ–∫—É–Ω–¥');
    console.log('   –ü–∞–º—è—Ç—å RSS:', Math.round(healthResponse.data.memory.rss / 1024 / 1024), 'MB');
    console.log('');

    // 3. –¢–µ—Å—Ç —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥...');
    const commandsResponse = await axios.get(`${BASE_URL}/api/commands`);
    console.log('‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–∞–Ω–¥:', commandsResponse.data.data.count);
    console.log('   –ö–æ–º–∞–Ω–¥—ã:', commandsResponse.data.data.commands.join(', '));
    console.log('');

    // 4. –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã help
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É help...');
    const helpResponse = await axios.post(`${BASE_URL}/api/command`, {
      command: 'help',
      args: []
    });
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ help –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    console.log('   –¢–∏–ø –æ—Ç–≤–µ—Ç–∞:', helpResponse.data.data.type);
    console.log('');

    // 5. –¢–µ—Å—Ç GitHub API (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
    if (process.env.GITHUB_TOKEN) {
      console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º GitHub API...');
      try {
        const userResponse = await axios.get(`${BASE_URL}/api/user/microsoft`);
        console.log('‚úÖ GitHub API —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userResponse.data.data.login);
        console.log('   –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤:', userResponse.data.data.public_repos);
        console.log('');
      } catch (error) {
        console.log('‚ö†Ô∏è GitHub API —Ç—Ä–µ–±—É–µ—Ç —Ç–æ–∫–µ–Ω (GITHUB_TOKEN)');
        console.log('');
      }
    } else {
      console.log('5Ô∏è‚É£ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º GitHub API (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)');
      console.log('');
    }

    // 6. –¢–µ—Å—Ç –∞–¥–º–∏–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    console.log('6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    try {
      const loginResponse = await axios.post(`${BASE_URL}/api/admin/login`, {
        username: 'admin',
        password: 'admin123'
      });
      
      if (loginResponse.data.success) {
        console.log('‚úÖ –ê–¥–º–∏–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        console.log('   Session ID:', loginResponse.data.session_id);
        console.log('   –†–æ–ª—å:', loginResponse.data.admin.role);
        console.log('');

        // 7. –¢–µ—Å—Ç –∞–¥–º–∏–Ω API
        console.log('7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω API...');
        const sessionId = loginResponse.data.session_id;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const statsResponse = await axios.get(`${BASE_URL}/api/admin/stats`, {
          headers: { 'Authorization': `Bearer ${sessionId}` }
        });
        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—É—á–µ–Ω–∞');
        console.log('   –ê–¥–º–∏–Ω–æ–≤:', statsResponse.data.data.admins);
        console.log('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', statsResponse.data.data.users);
        console.log('   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π:', statsResponse.data.data.active_sessions);
        console.log('');

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        const usersResponse = await axios.get(`${BASE_URL}/api/admin/users`, {
          headers: { 'Authorization': `Bearer ${sessionId}` }
        });
        console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω');
        console.log('   –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersResponse.data.data.total);
        console.log('');

        // –ê–¥–º–∏–Ω—ã
        const adminsResponse = await axios.get(`${BASE_URL}/api/admin/admins`, {
          headers: { 'Authorization': `Bearer ${sessionId}` }
        });
        console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω');
        console.log('   –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–æ–≤:', adminsResponse.data.data.total);
        console.log('');

        // –õ–æ–≥–∏
        const logsResponse = await axios.get(`${BASE_URL}/api/admin/logs?limit=5`, {
          headers: { 'Authorization': `Bearer ${sessionId}` }
        });
        console.log('‚úÖ –õ–æ–≥–∏ –∞—É–¥–∏—Ç–∞ –ø–æ–ª—É—á–µ–Ω—ã');
        console.log('   –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π:', logsResponse.data.data.total);
        console.log('');

      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', loginResponse.data.message);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.response?.data?.message || error.message);
    }

    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã:');
    console.log('   üåê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:3000');
    console.log('   üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:3000/admin.html');
    console.log('   üíö Health Check: http://localhost:3000/health');
    console.log('   ü§ñ API Commands: http://localhost:3000/api/commands');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    if (error.response) {
      console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('   –î–∞–Ω–Ω—ã–µ:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testAPI();
